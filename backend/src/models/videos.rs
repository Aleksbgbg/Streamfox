//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "videos")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: i64,
  pub created_at: Option<DateTimeWithTimeZone>,
  pub updated_at: Option<DateTimeWithTimeZone>,
  pub status: Option<i16>,
  #[sea_orm(column_type = "Text", nullable)]
  pub mime_type: Option<String>,
  pub duration_secs: Option<i32>,
  pub size_bytes: i64,
  pub creator_id: Option<i64>,
  #[sea_orm(column_type = "Text", nullable)]
  pub name: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub description: Option<String>,
  pub visibility: Option<i16>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::users::Entity",
    from = "Column::CreatorId",
    to = "super::users::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Users,
  #[sea_orm(has_many = "super::views::Entity")]
  Views,
  #[sea_orm(has_many = "super::watches::Entity")]
  Watches,
}

impl Related<super::users::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Users.def()
  }
}

impl Related<super::views::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Views.def()
  }
}

impl Related<super::watches::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Watches.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
