//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.1

use crate::models::base;
use crate::models::prelude::Users;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i64,
  pub created_at: Option<DateTimeWithTimeZone>,
  pub updated_at: Option<DateTimeWithTimeZone>,
  #[sea_orm(unique)]
  pub username: Option<String>,
  #[sea_orm(column_type = "Text", nullable, unique)]
  pub email_address: Option<String>,
  pub password: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::videos::Entity")]
  Videos,
  #[sea_orm(has_many = "super::views::Entity")]
  Views,
  #[sea_orm(has_many = "super::watches::Entity")]
  Watches,
}

impl Related<super::videos::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Videos.def()
  }
}

impl Related<super::views::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Views.def()
  }
}

impl Related<super::watches::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Watches.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

pub async fn find_user(username: &str) -> Option<Model> {
  Users::find()
    .filter(Column::Username.eq(username))
    .one(base::get_db())
    .await
    .unwrap()
}
